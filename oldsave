-- SaveManager.lua
local SaveManager = {}

-- Table to hold all saved data
SaveManager.Data = {}

-- Recursively traverse UI elements and save properties
function SaveManager:SaveWindow(Window)
    if not Window or not Window.Tabs then return end

    local WindowData = {}

    for TabName, Tab in pairs(Window.Tabs) do
        local TabData = {
            Groupboxes = {},
            Tabboxes = {}
        }

        -- Save all groupboxes
        for GBName, Groupbox in pairs(Tab.Groupboxes) do
            local GBData = {}

            for _, Element in ipairs(Groupbox.Container:GetChildren()) do
                if Element:IsA("Frame") and Library.RegistryMap[Element] then
                    local Registry = Library.RegistryMap[Element].Properties
                    for PropName, _ in pairs(Registry) do
                        GBData[Element.Name or tostring(Element)] = GBData[Element.Name or tostring(Element)] or {}
                        GBData[Element.Name or tostring(Element)][PropName] = Element[PropName]
                    end
                elseif Element:IsA("TextBox") or Element:IsA("TextLabel") then
                    GBData[Element.Name or tostring(Element)] = Element.Text
                elseif Element:IsA("TextButton") then
                    GBData[Element.Name or tostring(Element)] = Element.Text
                elseif Element:IsA("Frame") and Element.Value then
                    GBData[Element.Name or tostring(Element)] = Element.Value
                end
            end

            TabData.Groupboxes[GBName] = GBData
        end

        -- Save all tabboxes
        for TBName, Tabbox in pairs(Tab.Tabboxes) do
            local TBData = {}

            for TabName2, SubTab in pairs(Tabbox.Tabs) do
                local SubData = {}
                for _, Element in ipairs(SubTab.Container:GetChildren()) do
                    if Element:IsA("Frame") and Library.RegistryMap[Element] then
                        local Registry = Library.RegistryMap[Element].Properties
                        for PropName, _ in pairs(Registry) do
                            SubData[Element.Name or tostring(Element)] = SubData[Element.Name or tostring(Element)] or {}
                            SubData[Element.Name or tostring(Element)][PropName] = Element[PropName]
                        end
                    elseif Element:IsA("TextBox") or Element:IsA("TextLabel") then
                        SubData[Element.Name or tostring(Element)] = Element.Text
                    elseif Element:IsA("TextButton") then
                        SubData[Element.Name or tostring(Element)] = Element.Text
                    elseif Element:IsA("Frame") and Element.Value then
                        SubData[Element.Name or tostring(Element)] = Element.Value
                    end
                end

                TBData[TabName2] = SubData
            end

            TabData.Tabboxes[TBName] = TBData
        end

        WindowData[TabName] = TabData
    end

    SaveManager.Data[Window.Name or "Window"] = WindowData
end

-- Load saved data back into the window
function SaveManager:LoadWindow(Window)
    local WindowData = SaveManager.Data[Window.Name or "Window"]
    if not WindowData then return end

    for TabName, TabData in pairs(WindowData) do
        local Tab = Window.Tabs[TabName]
        if not Tab then continue end

        -- Load groupboxes
        for GBName, GBData in pairs(TabData.Groupboxes or {}) do
            local Groupbox = Tab.Groupboxes[GBName]
            if not Groupbox then continue end

            for ElementName, Props in pairs(GBData) do
                local Element = Groupbox.Container:FindFirstChild(ElementName)
                if Element then
                    for PropName, Value in pairs(Props) do
                        Element[PropName] = Value
                    end
                end
            end
        end

        -- Load tabboxes
        for TBName, TBData in pairs(TabData.Tabboxes or {}) do
            local Tabbox = Tab.Tabboxes[TBName]
            if not Tabbox then continue end

            for SubTabName, SubData in pairs(TBData or {}) do
                local SubTab = Tabbox.Tabs[SubTabName]
                if not SubTab then continue end

                for ElementName, Props in pairs(SubData) do
                    local Element = SubTab.Container:FindFirstChild(ElementName)
                    if Element then
                        if typeof(Props) == "table" then
                            for PropName, Value in pairs(Props) do
                                Element[PropName] = Value
                            end
                        else
                            -- For textboxes/buttons
                            if Element:IsA("TextBox") or Element:IsA("TextLabel") or Element:IsA("TextButton") then
                                Element.Text = Props
                            elseif Element:IsA("Frame") then
                                Element.Value = Props
                            end
                        end
                    end
                end
            end
        end
    end
end

-- Utility: auto-save/load via JSON
function SaveManager:SaveToFile(FileName)
    local HttpService = game:GetService("HttpService")
    local Json = HttpService:JSONEncode(SaveManager.Data)
    writefile(FileName, Json)
end

function SaveManager:LoadFromFile(FileName)
    if not isfile(FileName) then return end
    local HttpService = game:GetService("HttpService")
    local Json = readfile(FileName)
    SaveManager.Data = HttpService:JSONDecode(Json)
end

return SaveManager
