loadstring(game:HttpGet(("https://raw.githubusercontent.com/PhantomLord157/Nexus/main/betterUIlibrary"),true))()

local Window = Library:CreateWindow({
    Title = title2,
    Center = true,
    AutoShow = true,
    TabPadding = 8
})

local title, title2 = 'Nex | v%s | fps %s | ping %s', 'Operation Nexus | Version 2.0.0'

game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Operation Nexus Private",
    Text = "Nexus Private Loaded",
    Duration = 5;
})

local Tabs = {
    Credits = Window:AddTab('Credits'),
    Keybinds = Window:AddTab('Keybinds'),
    Visuals = Window:AddTab('Visuals'),
    Aimbot = Window:AddTab('Aimbot'),
    Games = Window:AddTab('Games'),
    Misc = Window:AddTab('Misc'),
    UISettings = Window:AddTab('Settings')
}

local CMainL = Tabs.Credits:AddLeftTabbox()
local CMainR = Tabs.Credits:AddLeftTabbox()
local CreditInfo = CMainL:AddTab('Credit Information')
local info = CMainR:AddTab('Information')

info:AddLabel('Aimbot Not Working')
info:AddLabel('More Coming soon')

CreditInfo:AddLabel('PhantomLord157 and TheChimcomMan')
CreditInfo:AddLabel('https://discord.gg/PNXyRxj5JU')

local KMainL = Tabs.Keybinds:AddLeftTabbox()
local KMainR = Tabs.Keybinds:AddRightTabbox()
local Keybindss = KMainL:AddTab('Keybinds')
local Keybinds = KMainR:AddTab('Keybinds')

Keybindss:AddLabel('Keypad 1 = NOT WORKING')
Keybindss:AddLabel('Keypad 1 = Show/Hide ESP')
Keybindss:AddLabel('Keypad 2 = Show/Hide Tracers')
Keybindss:AddLabel('Keypad 3 = Toggle ESP Teamcheck')
Keybinds:AddLabel('Keypad 4 = Show/Hide Crosshair')
Keybinds:AddLabel('Keypad 5 = Zoom In')
Keybinds:AddLabel('Keypad 6 = Expand Fov')

local Main = Tabs.Visuals:AddLeftTabbox()
local Toggles = Tabs.Visuals:AddRightTabbox()
local ESPStuff = Main:AddTab('ESP Stuff')

ESPStuff:AddButton('ESP', function()
    --- Configuration
_G.TeamCheck = true
_G.Tracers = true
_G.PlayerLabelsEnabled = true -- New toggle for player labels and highlights

-- Key Bindings
local toggleKeyTeamCheck = Enum.KeyCode.KeypadThree
local toggleKeyTracers = Enum.KeyCode.KeypadTwo
local toggleKeyESP = Enum.KeyCode.KeypadOne -- Toggle ESP (Player Labels & Highlights)

-- LocalPlayer and Services
local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local DebrisService = game:GetService("Debris")
local UserInputService = game:GetService("UserInputService")

-- Highlight colors
local redHighlightColor = Color3.new(1, 0, 0)
local greenHighlightColor = Color3.new(0, 1, 0)

-- Create a highlight instance if it doesn't exist
local function createHighlight(character, highlightColor)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart and not humanoidRootPart:FindFirstChild("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Name = "Highlight"
        highlight.Adornee = character
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.FillColor = highlightColor
        highlight.Parent = humanoidRootPart
        return highlight
    end
end

-- Update the highlight for a character based on team check
local function updateHighlight(character)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        local highlight = humanoidRootPart:FindFirstChild("Highlight")
        if _G.TeamCheck and player.TeamColor == character:FindFirstChild("TeamColor") then
            if highlight then
                highlight.FillColor = greenHighlightColor
            else
                createHighlight(character, greenHighlightColor)
            end
        else
            if highlight then
                highlight.FillColor = redHighlightColor
            else
                createHighlight(character, redHighlightColor)
            end
        end
    end
end

-- Create player label if it doesn't exist
local function createPlayerLabel(head)
    local nameLabel = Instance.new("BillboardGui")
    nameLabel.Name = "PlayerLabel"
    nameLabel.AlwaysOnTop = true
    nameLabel.ExtentsOffset = Vector3.new(0, 3, 0)
    nameLabel.Size = UDim2.new(0, 100, 0, 30)
    nameLabel.Parent = head

    local nameLabelText = Instance.new("TextLabel")
    nameLabelText.Name = "NameLabel"
    nameLabelText.BackgroundTransparency = 1
    nameLabelText.Size = UDim2.new(1, 0, 0.5, 0)
    nameLabelText.Font = Enum.Font.SourceSansBold
    nameLabelText.TextSize = 18
    nameLabelText.TextColor3 = Color3.new(1, 1, 1)
    nameLabelText.Parent = nameLabel

    local healthLabel = Instance.new("TextLabel")
    healthLabel.Name = "HealthLabel"
    healthLabel.BackgroundTransparency = 1
    healthLabel.Position = UDim2.new(0, 0, 0.5, 0)
    healthLabel.Size = UDim2.new(1, 0, 0.5, 0)
    healthLabel.Font = Enum.Font.SourceSansBold
    healthLabel.TextSize = 18
    healthLabel.TextColor3 = Color3.new(1, 1, 1)
    healthLabel.Parent = nameLabel

    return nameLabel
end

-- Update labels for all players
local function updatePlayerLabels()
    local playerPosition = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not playerPosition then return end

    for _, otherPlayer in ipairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player then
            local character = otherPlayer.Character
            local humanoid = character and character:FindFirstChild("Humanoid")
            local head = character and character:FindFirstChild("Head")
            if humanoid and head and humanoid.Health > 0 then
                local nameLabel = head:FindFirstChild("PlayerLabel") or createPlayerLabel(head)
                local distanceStuds = (head.Position - playerPosition.Position).Magnitude
                local distanceMeters = distanceStuds * 0.2 -- Convert distance to meters

                -- Update the label text
                nameLabel.NameLabel.Text = otherPlayer.Name
                nameLabel.HealthLabel.Text = string.format("Distance: %.2f m | Health: %d", distanceMeters, humanoid.Health)

                -- Update the highlight
                updateHighlight(character)

                -- Set team-based color for label
                if _G.TeamCheck and player.TeamColor == otherPlayer.TeamColor then
                    nameLabel.NameLabel.TextColor3 = Color3.new(0, 1, 0)
                else
                    nameLabel.NameLabel.TextColor3 = Color3.new(1, 0, 0)
                end
            else
                if head and head:FindFirstChild("PlayerLabel") then
                    head.PlayerLabel:Destroy()
                end
                local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart and humanoidRootPart:FindFirstChild("Highlight") then
                    humanoidRootPart.Highlight:Destroy()
                end
            end
        end
    end
end


-- Tracers
local Tracers = {}

-- Create a tracer for each player
local function createTracer(otherPlayer)
    local tracer = Drawing.new("Line")
    tracer.Visible = false
    tracer.Color = Color3.new(1, 0, 0)
    tracer.Thickness = 1
    tracer.Transparency = 1
    Tracers[otherPlayer] = tracer
end

-- Update all tracers
local function updateTracers()
    while _G.Tracers do
        for otherPlayer, tracer in pairs(Tracers) do
            local character = otherPlayer.Character
            local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart and character:FindFirstChild("Humanoid").Health > 0 then
                local screenPos, onScreen = camera:WorldToViewportPoint(humanoidRootPart.Position)
                if onScreen then
                    tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                    tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                    tracer.Visible = player.TeamColor ~= otherPlayer.TeamColor or not _G.TeamCheck
                else
                    tracer.Visible = false
                end
            else
                tracer.Visible = false
            end
        end
        RunService.Heartbeat:Wait()
    end
end

-- Toggle functions
local function toggleESP()
    _G.PlayerLabelsEnabled = not _G.PlayerLabelsEnabled
    _G.Tracers = _G.PlayerLabelsEnabled -- Also toggle tracers when toggling ESP
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Operation Nexus Private",
        Text = "ESP " .. (_G.PlayerLabelsEnabled and "Enabled" or "Disabled"),
        Duration = 3
    })
end

local function toggleTeamCheck()
    _G.TeamCheck = not _G.TeamCheck
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Operation Nexus Private",
        Text = "TeamCheck " .. (_G.TeamCheck and "Enabled" or "Disabled"),
        Duration = 3
    })
end

local function toggleTracers()
    _G.Tracers = not _G.Tracers
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Operation Nexus Private",
        Text = "Tracers " .. (_G.Tracers and "Enabled" or "Disabled"),
        Duration = 3
    })
end

-- Input handling for toggles
UserInputService.InputBegan:Connect(function(input, isProcessed)
    if not isProcessed then
        if input.KeyCode == toggleKeyTeamCheck then
            toggleTeamCheck()
        elseif input.KeyCode == toggleKeyTracers then
            toggleTracers()
        elseif input.KeyCode == toggleKeyESP then
            toggleESP()
        end
    end
end)

-- Player added event
game.Players.PlayerAdded:Connect(function(otherPlayer)
    createTracer(otherPlayer)
end)

-- Initialize tracers for existing players
for _, otherPlayer in ipairs(game.Players:GetPlayers()) do
    createTracer(otherPlayer)
end

-- Heartbeat connections for labels and tracers
RunService.Heartbeat:Connect(updatePlayerLabels)
coroutine.wrap(updateTracers)()

-- Notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Operation Nexus Private",
    Text = "Added ESP",
    Duration = 5
})

end)

ESPStuff:AddButton('Fullbright', function()
    while wait(0.1) do
        local Lighting = game:GetService("Lighting")
        Lighting.Ambient = Color3.new(1, 1, 1)
        Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
    end
end)

ESPStuff:AddButton('No Fog', function()
    Lighting = game:GetService("Lighting")
    Lighting.FogEnd = 100000
        for i,v in pairs(Lighting:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end)

ESPStuff:AddButton('Zoom', function()
    local player = game.Players.LocalPlayer
    local camera = game.Workspace.CurrentCamera
    local zoomInFOV = 20
    local zoomOutFOV = 70
    local zoomSpeed = 0.01
    
    local isZoomedIn = false
    
    local function toggleZoom()
        if isZoomedIn then
            for fov = camera.FieldOfView, zoomOutFOV, zoomSpeed do
                camera.FieldOfView = fov
            end
            camera.FieldOfView = zoomOutFOV
        else
            for fov = camera.FieldOfView, zoomInFOV, -zoomSpeed do
            camera.FieldOfView = fov
            end
            camera.FieldOfView = zoomInFOV
        end
        isZoomedIn = not isZoomedIn
    end
    
    game:GetService("UserInputService").InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.KeypadFive then 
            toggleZoom()
        end
    end)
end)

ESPStuff:AddButton('Expand FOV', function()
    local player = game.Players.LocalPlayer
    local camera = game.Workspace.CurrentCamera
    local zoomInFOV = 120
    local zoomOutFOV = 70
    local zoomSpeed = 0.01
    
    local isZoomedIn = false
    
    local function toggleZoom()
        if isZoomedIn then
            for fov = camera.FieldOfView, zoomOutFOV, zoomSpeed do
                camera.FieldOfView = fov
            end
            camera.FieldOfView = zoomOutFOV
        else
            for fov = camera.FieldOfView, zoomInFOV, -zoomSpeed do
            camera.FieldOfView = fov
            end
            camera.FieldOfView = zoomInFOV
        end
        isZoomedIn = not isZoomedIn
    end
    
    game:GetService("UserInputService").InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.KeypadSix then 
            toggleZoom()
        end
    end)
end)

local AMainR = Tabs.Aimbot:AddLeftTabbox()
local AMainL = Tabs.Aimbot:AddRightTabbox()
local Aimbot = AMainR:AddTab('Aimbot')
local aimbot = AMainL:AddTab('Aimbot Toggles')

aimbot:AddToggle('Aim Lock', {
    Text = 'Aim Lock',
    Default = false,

    Callback = function(state)
        AimbotEnabled = state
    end
})

aimbot:AddToggle('Circle Visibility', {
    Text = 'Circle Visibility',
    Default = true,

    Callback = function(state)
        CircleVisible = state
        FOVCircle.Visible = state
    end
})

aimbot:AddToggle('Circle Filled', {
    Text = 'Circle Filled',
    Default = false,

    Callback = function(state)
        CircleFilled = state
        FOVCircle.Filled = state
    end
})

aimbot:AddSlider('FOV Size', {
    Text = 'FOV Size',
    Default = 80,
    Min = 10,
    Max = 200,
    Rounding = 0,

    Callback = function(value)
        CircleRadius = value
    end
})

aimbot:AddSlider('Circle Transparency', {
    Text = 'Circle Transparency',
    Default = 0.5,
    Min = 0.01,
    Max = 1,
    Rounding = 0,

    Callback = function(value)
        CircleTransparency = value
        FOVCircle.Transparency = value
    end
})

aimbot:AddSlider('Circle Thickness', {
    Text = 'Circle Thickness',
    Default = 1,
    Min = 1,
    Max = 10,
    Rounding = 0,

    Callback = function(value)
        CircleThickness = value
        FOVCircle.Thickness = value
    end
})

aimbot:AddSlider('Sensitivity', {
    Text = 'Sensitivity',
    Default = 0.5,
    Min = 0,
    Max = 50,
    Rounding = 0,

    Callback = function(value)
        Sensitivity = value
    end
})

aimbot:AddColorPicker('Circle Color', {
    Default = Color3.new(0, 0, 255),
    Title = 'Circle Color',
    Transparency = 0,

    Callback = function(color)
        FOVCircle = color
        CircleColor = color
        FOVCircle.Color = color
    end
})

 aimbot:AddDropdown('Aim Part', {
    Values = {'Head', 'Torso'},
    Default = 1,
    Multi = false,

    Text = 'Aim Lock Part',
    Tooltip = 'Select Part',

    Callback = function(option)
        AimPart = option
    end
})

local MMainL = Tabs.Misc:AddLeftTabbox()
local MMainR = Tabs.Misc:AddRightTabbox()
local Movement = MMainL:AddTab('Movment')

Movment:AddSlider('Walk Speed', {
    Text = 'Walk Speed',
    Default = 20,
    Min = 0,
    Max = 1000,
    Rounding = 0,

    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
    end
})

Movment:AddSlider('Jump Power', {
    Text = 'Jump Power',
    Default = 10,
    Min = 0,
    Max = 1000,
    Rounding = 0,

    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local UMainR = Tabs.UISettings:AddRightTabbox()
local UMainL = Tabs.UISettings:AddLeftTabbox()
local ui = UMainR:AddTab('UI Settings')
local UI = UMainL:AddTab('UI Settings')

-- Add toggle for the watermark visibility
ui:AddToggle('showwatermark', {
    Text = "Show Watermark",
    Default = true,  -- Set to true by default
    Callback = function(value)
        -- Update visibility of the watermark elements based on the toggle
        background.Visible = value
        topbar.Visible = value
        topbar1.Visible = value
        logotext.Visible = value
        text.Visible = value
    end
})

local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera

local function updateTopRightPosition()
    return Vector2.new(camera.ViewportSize.X - 10, 10) -- 10 pixels from the right and top
end

local toprightpos = updateTopRightPosition()

local background = draw:new("Line", {
    To = toprightpos - Vector2.new(200, -(6+3)),
    From = toprightpos - Vector2.new(0, -(6+3)),
    Thickness = 15,
    Transparency = 0.7,
    Visible = true,
    Color = Color3.new(0, 0, 0),
    ZIndex = 1,
})
local topbar = draw:new("Line", {
    To = toprightpos - Vector2.new(200, 0),
    From = toprightpos - Vector2.new(0, 0),
    Thickness = 1,
    Transparency = 1,
    Visible = true,
    Color = Options["watercolor"].Value,
    ZIndex = 1,
})
local topbar1 = draw:new("Line", {
    To = toprightpos - Vector2.new(200, -1),
    From = toprightpos - Vector2.new(0, -1),
    Thickness = 1,
    Transparency = 1,
    Visible = true,
    Color = Options["watercolor"].Value,
    ZIndex = 1,
})
local logotext = draw:new("Text", {
    Text = "Operation Nexus Private",
    Size = 13,
    Font = 1,
    Outline = true,
    Center = false,
    Position = toprightpos - Vector2.new(195, -2),
    Transparency = 1,
    Visible = true,
    Color = Options["watercolor"].Value,
    ZIndex = 1,
})
local text = draw:new("Text", {
    Text = "V - 1.8.0 | fps | ping",
    Size = 13,
    Font = 1,
    Outline = true,
    Center = false,
    Position = toprightpos - Vector2.new(195, 15),
    Transparency = 1,
    Visible = true,
    Color = Color3.new(1, 1, 1),
    ZIndex = 1,
})
draw:changevis(false)
local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60

RunService.Stepped:Connect(function()
    local toprightpos = updateTopRightPosition()

    topbar.To = toprightpos - Vector2.new(logotext.TextBounds.X + text.TextBounds.X + 10, 0)
    topbar1.To = toprightpos - Vector2.new(logotext.TextBounds.X + text.TextBounds.X + 10, -1)
    background.To = toprightpos - Vector2.new(logotext.TextBounds.X + text.TextBounds.X + 10, -(6+3))
    logotext.Position = toprightpos - Vector2.new(logotext.TextBounds.X + text.TextBounds.X + 5, -2)
    text.Position = toprightpos - Vector2.new(text.TextBounds.X + 5, -2)

    topbar.Color = Options["watercolor"].Value
    topbar1.Color = Options["watercolor"].Value
    logotext.Color = Options["watercolor"].Value

    FrameCounter = FrameCounter + 1
    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
    end

    text.Text = title:format(
        "0.0.1",
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    )
end)
