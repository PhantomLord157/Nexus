local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/PhantomLord157/ProjectBullShit/main/UILibrary.lua"))()
local Window = Library.CreateLib("Operation Nexus Private V-1.7.3", "DarkTheme")

-- Notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Operation Nexus Private",
    Text = "Nexus Private Loaded",
    Duration = 5;
})

local info = Window:NewTab("Information")
local infoSection = info:NewSection("Credits To: PhantomLord157 and TheChimcowMan")
infoSection:NewLabel("Join Our Discord At https://discord.gg/PNXyRxj5JU")

local Keybinds = Window:NewTab("Keybinds")
local KeybindsSection = Keybinds:NewSection("Keybinds")
KeybindsSection:NewLabel("Keypad 1 = Show/Hide ESP")
KeybindsSection:NewLabel("Keypad 2 = Show/Hide Tracers")
KeybindsSection:NewLabel("Keypad 3 = Toggle ESP Teamcheck")
KeybindsSection:NewLabel("Keypad 4 = Show/Hide Crosshair") 

local ESP = Window:NewTab("ESP")
local ESPSection = ESP:NewSection("ESP")

ESPSection:NewButton("Add ESP", "Shows enemy player chams, health, name, and distance from you.", function()
--- Configuration
_G.TeamCheck = true
_G.Tracers = true
_G.PlayerLabelsEnabled = true -- New toggle for player labels and highlights

-- Key Bindings
local toggleKeyTeamCheck = Enum.KeyCode.KeypadThree -- Toggle TeamCheck
local toggleKeyTracers = Enum.KeyCode.KeypadTwo -- Toggle Tracers
local toggleKeyLabels = Enum.KeyCode.KeypadOne -- Toggle Player Labels and Highlights

-- LocalPlayer and Services
local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local DebrisService = game:GetService("Debris")
local UserInputService = game:GetService("UserInputService")

-- Highlight colors
local highlight = Instance.new("Highlight")
highlight.Name = "Highlight"
local redHighlightColor = Color3.new(1, 0, 0)
local greenHighlightColor = Color3.new(0, 1, 0)

-- Create a highlight instance if it doesn't exist
local function createHighlight(character, highlightColor)
    if _G.PlayerLabelsEnabled then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart and not humanoidRootPart:FindFirstChild("Highlight") then
            local highlightClone = highlight:Clone()
            highlightClone.Adornee = character
            highlightClone.Parent = humanoidRootPart
            highlightClone.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlightClone.Name = "Highlight"
            highlightClone.FillColor = highlightColor
        end
    end
end

-- Create player label if it doesn't exist
local function createPlayerLabel(head)
    if _G.PlayerLabelsEnabled then
        local nameLabel = Instance.new("BillboardGui", head)
        nameLabel.Name = "PlayerLabel"
        nameLabel.AlwaysOnTop = true
        nameLabel.ExtentsOffset = Vector3.new(0, 3, 0)
        nameLabel.Size = UDim2.new(0, 100, 0, 30)
        
        local nameLabelText = Instance.new("TextLabel", nameLabel)
        nameLabelText.Name = "NameLabel"
        nameLabelText.BackgroundTransparency = 1
        nameLabelText.Size = UDim2.new(1, 0, 0.5, 0)
        nameLabelText.Font = Enum.Font.SourceSansBold
        nameLabelText.TextSize = 18
        nameLabelText.TextColor3 = Color3.new(1, 1, 1)

        local healthLabel = Instance.new("TextLabel", nameLabel)
        healthLabel.Name = "HealthLabel"
        healthLabel.BackgroundTransparency = 1
        healthLabel.Position = UDim2.new(0, 0, 0.5, 0)
        healthLabel.Size = UDim2.new(1, 0, 0.5, 0)
        healthLabel.Font = Enum.Font.SourceSansBold
        healthLabel.TextSize = 18
        healthLabel.TextColor3 = Color3.new(1, 1, 1)

        return nameLabel
    end
end

-- Update labels for all players
local function updatePlayerLabels()
    local playerPosition = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not playerPosition then return end

    for _, otherPlayer in ipairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player then
            local character = otherPlayer.Character
            local humanoid = character and character:FindFirstChild("Humanoid")
            local head = character and character:FindFirstChild("Head")
            if humanoid and head and humanoid.Health > 0 then
                if _G.PlayerLabelsEnabled then
                    local nameLabel = head:FindFirstChild("PlayerLabel") or createPlayerLabel(head)
                    local distance = (head.Position - player.Character.Head.Position).Magnitude
                    
                    -- Update the label text
                    nameLabel.NameLabel.Text = otherPlayer.Name
                    nameLabel.HealthLabel.Text = string.format("Distance: %.2f | Health: %d", distance, humanoid.Health)

                    -- Set team-based color
                    if _G.TeamCheck and player.TeamColor == otherPlayer.TeamColor then
                        createHighlight(character, greenHighlightColor)
                        nameLabel.NameLabel.TextColor3 = Color3.new(0, 1, 0)
                    else
                        createHighlight(character, redHighlightColor)
                        nameLabel.NameLabel.TextColor3 = Color3.new(1, 0, 0)
                    end
                elseif head:FindFirstChild("PlayerLabel") then
                    -- Destroy label if PlayerLabels are disabled
                    head.PlayerLabel:Destroy()
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart and humanoidRootPart:FindFirstChild("Highlight") then
                        humanoidRootPart.Highlight:Destroy()
                    end
                end
            elseif head:FindFirstChild("PlayerLabel") then
                head.PlayerLabel:Destroy()
            end
        end
    end
end

-- Tracers
local Tracers = {}

-- Create a tracer for each player
local function createTracer(otherPlayer)
    local tracer = Drawing.new("Line")
    tracer.Visible = false
    tracer.Color = Color3.new(255, 0, 0)
    tracer.Thickness = 1
    tracer.Transparency = 1
    Tracers[otherPlayer] = tracer
end

-- Update all tracers
local function updateTracers()
    while _G.Tracers do
        for otherPlayer, tracer in pairs(Tracers) do
            local character = otherPlayer.Character
            local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart and character:FindFirstChild("Humanoid").Health > 0 then
                local screenPos, onScreen = camera:WorldToViewportPoint(humanoidRootPart.Position)
                if onScreen then
                    tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                    tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                    tracer.Visible = player.TeamColor ~= otherPlayer.TeamColor or not _G.TeamCheck
                else
                    tracer.Visible = false
                end
            else
                tracer.Visible = false
            end
        end
        RunService.Heartbeat:Wait()
    end
end

-- Toggle functions
local function toggleTeamCheck()
    _G.TeamCheck = not _G.TeamCheck
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Operation Nexus Private",
        Text = "TeamCheck " .. (_G.TeamCheck and "Enabled" or "Disabled"),
        Duration = 3
    })
end

local function toggleTracers()
    _G.Tracers = not _G.Tracers
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Operation Nexus Private",
        Text = "Tracers " .. (_G.Tracers and "Enabled" or "Disabled"),
        Duration = 3
    })
end

local function togglePlayerLabels()
    _G.PlayerLabelsEnabled = not _G.PlayerLabelsEnabled
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Operation Nexus Private",
        Text = "Player Labels & Highlights " .. (_G.PlayerLabelsEnabled and "Enabled" or "Disabled"),
        Duration = 3
    })
end

-- Input handling for toggles
UserInputService.InputBegan:Connect(function(input, isProcessed)
    if not isProcessed then
        if input.KeyCode == toggleKeyTeamCheck then
            toggleTeamCheck()
        elseif input.KeyCode == toggleKeyTracers then
            toggleTracers()
        elseif input.KeyCode == toggleKeyLabels then
            togglePlayerLabels()
        end
    end
end)

-- Player added event
game.Players.PlayerAdded:Connect(function(otherPlayer)
    createTracer(otherPlayer)
end)

-- Initialize tracers for existing players
for _, otherPlayer in ipairs(game.Players:GetPlayers()) do
    createTracer(otherPlayer)
end

-- Heartbeat connections for labels and tracers
RunService.Heartbeat:Connect(updatePlayerLabels)
coroutine.wrap(updateTracers)()

-- Notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Operation Nexus Private",
    Text = "Added ESP",
    Duration = 5
})

end)

ESPSection:NewButton("FullBright", "Makes Dark Bright.", function()
while wait(0.1) do
    local Lighting = game:GetService("Lighting")
      Lighting.Ambient = Color3.new(1, 1, 1)
      Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
    end
end)

ESPSection:NewButton("No Fog", "Removes Fog", function()
    Lighting.FogEnd = 100000
    for i,v in pairs(Lighting:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end)

local Aimbot = Window:NewTab("Aimbot")
local AimbotTogglesSection = Aimbot:NewSection("Aimbot Toggles")
local FOVTogglesSection = Aimbot:NewSection("FOV Toggles")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Holding = false

-- Aimbot settings
AimbotEnabled = false
TeamCheck = true
local AimPart = "Head"
Sensitivity = 0

-- FOV settings
CircleSides = 12
CircleColor = Color3.fromRGB(255, 255, 255)
local CircleTransparency = 0.7
CircleRadius = 80
local CircleFilled = false
CircleVisible = false
local CircleThickness = 3

-- Wall check toggle
WallCheckEnabled = false

FOVCircle = Drawing.new("Circle")
FOVCircle.Filled = CircleFilled
FOVCircle.Visible = CircleVisible
FOVCircle.Transparency = CircleTransparency
FOVCircle.Thickness = CircleThickness

function IsInFrontOfCamera(part)
    local cameraCFrame = Camera.CFrame
    local partPosition = part.Position
    local cameraLookVector = cameraCFrame.LookVector
    local directionToPart = (partPosition - cameraCFrame.Position).Unit
    return cameraLookVector:Dot(directionToPart) > 0
end

function GetClosestPlayer()
    local MaximumDistance = CircleRadius
    local Target = nil
    local ClosestDistance = math.huge

    local centerScreen = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

    for _, v in pairs(Players:GetPlayers()) do
        if v ~= LocalPlayer and (not TeamCheck or v.Team ~= LocalPlayer.Team) then
            local character = v.Character
            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    if WallCheckEnabled then
                        local ray = Ray.new(Camera.CFrame.Position, humanoidRootPart.Position - Camera.CFrame.Position)
                        local hitPart, hitPosition = workspace:FindPartOnRay(ray)
                        if hitPart and hitPart.Parent ~= character then
                            break
                        end
                    end

                    local screenPoint = Camera:WorldToScreenPoint(humanoidRootPart.Position)
                    local vectorDistance = (centerScreen - Vector2.new(screenPoint.X, screenPoint.Y)).Magnitude

                    if vectorDistance < MaximumDistance and vectorDistance < ClosestDistance and IsInFrontOfCamera(humanoidRootPart) then
                        ClosestDistance = vectorDistance
                        Target = v
                    end
                end
            end
        end
    end

    return Target
end

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        Holding = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        Holding = false
    end
end)

RunService.RenderStepped:Connect(function()
    FOVCircle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
    FOVCircle.Radius = CircleRadius
    FOVCircle.Color = CircleColor
    FOVCircle.Visible = CircleVisible
    FOVCircle.Transparency = CircleTransparency
    FOVCircle.NumSides = CircleSides
    FOVCircle.Thickness = CircleThickness

    if Holding and AimbotEnabled then
        local targetPlayer = GetClosestPlayer()
        if targetPlayer then
            local targetPart = targetPlayer.Character and targetPlayer.Character[AimPart]
            if targetPart then
                local targetPosition = targetPart.Position
                local lookVector = (targetPosition - Camera.CFrame.Position).Unit
                local targetCFrame = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + lookVector)
                TweenService:Create(Camera, TweenInfo.new(Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = targetCFrame}):Play()
            end
        end
    end
end)

AimbotTogglesSection:NewToggle("Enable Aimbot", "Enables Aimbot", function(state)
    AimbotEnabled = state
end)

AimbotTogglesSection:NewToggle("Enable Team Check", "Enables Team Check", function(state)
    TeamCheck = state
end)

FOVTogglesSection:NewToggle("FOV Visible", "Changes the visibility of the FOV.", function (state)
    CircleVisible = state
end)

FOVTogglesSection:NewColorPicker("FOV Color", "Changes The FOV Color", Color3.fromRGB(0, 0, 0), function(color)
    CircleColor = color
end)

FOVTogglesSection:NewSlider("FOV Size", "Changes the size of the FOV.", 500, 0, function(s)
    CircleRadius = s
end)

local CrossHair = Window:NewTab("CrossHair")
local CrosshairSettings = CrossHair:NewSection("Crosshair Settings")

local function API_Check()
    if Drawing == nil then
        return "No"
    else
        return "Yes"
    end
end

local Find_Required = API_Check()

if Find_Required == "No" then
    game:GetService("StarterGui"):SetCore("SendNotification",{
        Title = "Operation Nexus Private";
        Text = "Crosshair script could not be loaded because your exploit is unsupported.";
        Duration = math.huge;
        Button1 = "OK"
    })

    return
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera

local Typing = false

local ViewportSize_ = Camera.ViewportSize / 2
local Axis_X, Axis_Y = ViewportSize_.X, ViewportSize_.Y

local HorizontalLine = Drawing.new("Line")
local VerticalLine = Drawing.new("Line")

local SendNotifications = true   -- If set to true then the script would notify you frequently on any changes applied and when loaded / errored. (If a game can detect this, it is recommended to set it to false)
local DefaultSettings = false   -- If set to true then the script would create a crosshair with the default settings regardless of any changes.
local ToMouse = false   -- If set to true then the crosshair will be positioned to your mouse cursor's position. If set to false it will be positioned to the center of your screen.

_G.CrosshairVisible = false   -- If set to true then the crosshair would be visible and vice versa.
_G.CrosshairSize = 20   -- The size of the crosshair.
local CrosshairThickness = 2   -- The thickness of the crosshair.
_G.CrosshairColor = Color3.fromRGB(0, 255, 0)   -- The color of the crosshair
local CrosshairTransparency = 1   -- The transparency of the crosshair.

local DisableKey = Enum.KeyCode.KeypadFour   -- The key that enables / disables the crosshair.

RunService.RenderStepped:Connect(function()
    local Real_Size = _G.CrosshairSize / 2

    HorizontalLine.Color = _G.CrosshairColor
    HorizontalLine.Thickness = CrosshairThickness
    HorizontalLine.Visible = _G.CrosshairVisible
    HorizontalLine.Transparency = CrosshairTransparency
    
    VerticalLine.Color = _G.CrosshairColor
    VerticalLine.Thickness = CrosshairThickness
    VerticalLine.Visible = _G.CrosshairVisible
    VerticalLine.Transparency = CrosshairTransparency
    
    if ToMouse == true then
        HorizontalLine.From = Vector2.new(UserInputService:GetMouseLocation().X - Real_Size, UserInputService:GetMouseLocation().Y)
        HorizontalLine.To = Vector2.new(UserInputService:GetMouseLocation().X + Real_Size, UserInputService:GetMouseLocation().Y)
        
        VerticalLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y - Real_Size)
        VerticalLine.To = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y + Real_Size)
    elseif ToMouse == false then
        HorizontalLine.From = Vector2.new(Axis_X - Real_Size, Axis_Y)
        HorizontalLine.To = Vector2.new(Axis_X + Real_Size, Axis_Y)
    
        VerticalLine.From = Vector2.new(Axis_X, Axis_Y - Real_Size)
        VerticalLine.To = Vector2.new(Axis_X, Axis_Y + Real_Size)
    end
end)

if DefaultSettings == true then
    _G.CrosshairVisible = true
    _G.CrosshairSize = 25
    CrosshairThickness = 1
    _G.CrosshairColor = Color3.fromRGB(40, 90, 255)
    CrosshairTransparency = 0.15
    DisableKey = Enum.KeyCode.Q
end

UserInputService.TextBoxFocused:Connect(function()
    Typing = true
end)

UserInputService.TextBoxFocusReleased:Connect(function()
    Typing = false
end)

UserInputService.InputBegan:Connect(function(Input)
    if Input.KeyCode == DisableKey and Typing == false then
        _G.CrosshairVisible = not _G.CrosshairVisible
        
        if SendNotifications == true then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Operation Nexus Private";
                Text = "The crosshair's visibility is now set to "..tostring(_G.CrosshairVisible)..".";
                Duration = 5;
            })
        end
    end
end)

CrosshairSettings:NewToggle("Enable Crosshair", "Or Keypad", function(state)
    _G.CrosshairVisible = state
end)

CrosshairSettings:NewSlider("Crosshair Size", "Changes the size of the Crosshair", 200, 0, function(s)
    _G.CrosshairSize = s
end)

CrosshairSettings:NewColorPicker("Crosshair Color", "Changes the color of the crosshair", Color3.fromRGB(0, 0, 0), function(color)
    _G.CrosshairColor = color
end)


local character = Window:NewTab("Character")
local movementSection = character:NewSection("Movement (UNSAFE)")

movementSection:NewSlider("Walk Speed Slider", "Speed", 500, 0, function(s)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s
end)

movementSection:NewSlider("Jump power Slider", "Jump", 500, 0, function(s)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = s
end)

local Other = Window:NewTab("Other Scripts")
local OthersSection = Other:NewSection("Scripts")

OthersSection:NewButton("Inf Yield", "In Case You Need It.", function()
    loadstring(game:HttpGet(("https://raw.githubusercontent.com/PhantomLord157/ProjectBullShit/main/Inf%20Yeild"),true))()
end)

OthersSection:NewButton("Dark Dex", "In Case You Need It.", function()
    loadstring(game:HttpGet(("https://raw.githubusercontent.com/PhantomLord157/ProjectBullShit/main/DarkDex"),true))()
end)

--1.7.3
